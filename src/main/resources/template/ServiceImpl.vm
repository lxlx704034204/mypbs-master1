package ${package_name}.service.impl;

import com.pbs.ams.common.annotation.BaseService;
import com.pbs.ams.common.base.BaseServiceImpl;
import ${package_name}.mappers.${model}Mapper;
import ${package_name}.model.${model};
import ${package_name}.model.${model}Example;
import ${package_name}.service.${model}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
* ${model}Service实现
* Created by ams on ${ctime}.
*/
@Service
@Transactional(rollbackFor = Exception.class)
@BaseService
public class ${model}ServiceImpl extends BaseServiceImpl<${model}Mapper, ${model}, ${model}Example> implements ${model}Service {

    private static Logger _log = LoggerFactory.getLogger(${model}ServiceImpl.class);

    @Autowired
    private ${model}Mapper ${mapper}Mapper;


##        @Override
##        public int deleteByPrimaryKey(Long id) {
##            try {
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                return ${mapper}Mapper.deleteByPrimaryKey(id);
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return 0;
##        }
##
##
##        @Override
##        public int insert(${model} ${mapper}) {
##            try {
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                return ${mapper}Mapper.insert(${mapper});
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return 0;
##        }
##
##        @Override
##        public int insertSelective(${model} ${mapper}) {
##            try {
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                return ${mapper}Mapper.insertSelective(${mapper});
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return 0;
##        }
##
##
##        @Override
##        public ${model} selectByPrimaryKey(Long id) {
##            try {
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                return ${mapper}Mapper.selectByPrimaryKey(id);
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return null;
##        }
##
##
##        @Override
##        public int updateByPrimaryKeySelective(${model} ${mapper}) {
##            try {
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                return ${mapper}Mapper.updateByPrimaryKeySelective(${mapper});
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return 0;
##        }
##
##
##        @Override
##        public int updateByPrimaryKey(${model} ${mapper}) {
##            try {
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                return ${mapper}Mapper.updateByPrimaryKey(${mapper});
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return 0;
##        }
##
##        @Override
##        public int deleteByPrimaryKeys(String ids) {
##            try {
##                if (StringUtils.isBlank(ids)) {
##                    return 0;
##                }
##                DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##                String[] idArray = ids.split("-");
##                int count = 0;
##                for (String idStr : idArray) {
##                    if (StringUtils.isBlank(idStr)) {
##                        continue;
##                    }
##                    Long id = Long.parseLong(idStr);
##                    //count += amsStockAccountMapper.deleteByPrimaryKey(id);
##                }
##                return count;
##                } catch (Exception e) {
##                    e.printStackTrace();
##                }
##                DynamicDataSource.clearDataSource();
##                return 0;
##        }
##
##
##        /**
##        * MANDATORY:该方法只能在一个已存在的事务中执行.
##        * @return
##        */
##        @Override
##        @Transactional(propagation = Propagation.MANDATORY)
##        public int insertTo${model}Snaps() {
##        try {
##            DynamicDataSource.setDataSource(DataSourceEnum.MASTER.getName());
##            //return ${mapper}Mapper.insertTo${model}Snaps();
##            } catch (Exception e) {
##                e.printStackTrace();
##            }
##            DynamicDataSource.clearDataSource();
##            return 0;
##        }

}